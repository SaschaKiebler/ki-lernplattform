datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Document {
  id      String                 @id @default(cuid())
  content String
  vector  Unsupported("vector")?
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course[]
  Result    Result[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Models for the application

model Course {
  id          String    @id @default(cuid())
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String
  Lecture     Lecture[]
  Quiz        Quiz[]
}

model Lecture {
  id          String     @id @default(cuid())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String
  videoUrl    String
  texts       InfoText[]
}

model InfoText {
  id        String   @id @default(cuid())
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  lectureId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
}

model Quiz {
  id          String     @id @default(cuid())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String
  questions   Question[]
  Result      Result[]
}

model Result {
  id        String   @id @default(cuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  score     Int
}

model Question {
  id        String   @id @default(cuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question  String
  options   String[]
  answer    String
}
